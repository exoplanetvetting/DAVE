function [ transitInfo ] = computeTransitinessKnownMap( info,map,outfile )
%Using a previous map and population (map) of known transits
%Compute the lpp-knn transit metric on a new set of folded bin light curves
%map is the result of the code compute_Transitiness.m
%info is a result of the code createMatrixByType.m
%
%It then prints the reslts to a file one line per TCE.

%Apply the LPP map to the old sample
[Ygood]=maplle_oos(map.X

%Apply the LPP map for the out of sample
[Yall]=maplle_oos(info.X,map.Ymap,map.nDim);
[Zall]=maplle_oos(info.X,map.Zmap,2);

%x are known transits
%y are those that need to be classified
x=Ymap.mapped(knnGood,:);
y=Ymap.mapped(:,:);

[ dymean, dxmean,dxstd, dxmax ] = knnDistance_inclass( x,y,knn );

fid=fopen(outfile,'w');

fprintf(fid,'#Date = %s\n#1SigmaDistance = %f\n#NDim = %i\n#knn = %i\n#type =%s \n',date,dxstd,nDim,knn,info.dettype);
fprintf(fid,'#TCE    MeanDistance   sampleType\n');
for i=1:length(y)
    
    fprintf(fid,'%s  %f  %i\n', info.tce{i}, dymean(i),info.d(i));
    
end

fclose(fid);
end

